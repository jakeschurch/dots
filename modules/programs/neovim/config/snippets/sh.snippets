snippet log_trap
	trap 'log::error "An error has occured"' ERR

snippet log
	function log::level_is_active {
		local check_level current_level
		check_level=\$1

		declare -A log_levels=(
			[DEBUG]=1
			[INFO]=2
			[WARN]=3
			[ERROR]=4
		)

		check_level="$(log_levels["$check_level"])"
		current_level="$(log_levels["$LOG_LEVEL"])"

		(( check_level >= current_level ))
	}

	function log::_write_log {
		local timestamp file function_name log_level
		log_level="\$1"
		shift

		if log::level_is_active "$log_level"; then
			timestamp=$(date +'%y.%m.%d %H:%M:%S')
			file="${BASH_SOURCE[2]##*/}"
			function_name="${FUNCNAME[2]}"
			>&2 printf '%s [%s] [%s - %s]: %s\n' \
			"$log_level" "$timestamp" "$file" "$function_name" "${*}"
	}

	function log::info {
		log::_write_log "INFO" "$@"
	}

	function log::error {
		log::_write_log "ERROR" "$@"
		local stack_offset=1
		printf '%s:\n' 'Stacktrace: ' >&2

		for stack_id in "${!FUNCNAME[@]}"; do
			if [[ "stack_offset" -le "$stack_id" ]]; then
				local source_file="${BASH_SOURCE[$stack_id]}"
				local function="${FUNCNAME[$stack_id]}"
				local line="${BASH_LINENO[$(( stack_id - 1 ))]}"
				>&2 printf '\t%s:%s:%s\n' "$source_file" "$function" "$line"
			fi
		done
	}

snippet select
  __select_option() {
    local prompt=\$1
    shift

    # Ensure that the options are properly passed as an array
    local -a options
    options=("$@")

    # Check if there are any options
    if [ ${#options[@]} -eq 0 ]; then
      echo "No options provided!"
      return 1
    fi

    # Display the options with numbers
    echo "$prompt" >&2
    for i in "${!options[@]}"; do
      echo "$((i + 1))) ${options[i]}" >&2
    done

    # Read user input (selection)
    local choice
    while :; do
      read -r -p "Enter the number of your choice: " choice

      # Validate that the choice is within the correct range
      if [[ "$choice" -ge 1 && "$choice" -le "${#options[@]}" ]]; then
        # Return the selected option (indexed correctly)
        echo "${options[$((choice - 1))]}"
        break
      else
        echo "Invalid choice. Please select a valid option." >&2
      fi
    done
  }

  _multiselect() {
    # \$1: Options
    # \$2: Prompt

    local options prompt

    prompt="\$1"
    shift
    read -r -a options <<<"$(printf '%s\n' "$*")"

    if [ "$prompt" = "" ]; then
      echo "ERROR: prompt is required"
      exit 1
    fi

    if [ ${#options[@]} -eq 0 ]; then
      echo "ERROR: options are required"
      exit 1
    fi

    if command -v fzf &>/dev/null; then
      printf "%s\n" "${options[@]}" |
        fzf --cycle --reverse --info=hidden --height=~100% --prompt="$prompt"
    else
      __select_option "$prompt" "$@"
    fi
  }


snippet flags
	while [[ $# -gt 0 ]]; do
		case "\$1" in
			--${1})
				${1}="\$1"
				shift
				;;
		esac
	done
